package main

import (
	"fmt"
	"log"
	"net"
	"os"

	"github.com/joho/godotenv"
)

func main() {

	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Panicf("Error loading .env file: %v", err.Error())
	}

	// Setup server startup information
	protocol := os.Getenv("PROTOCOL")
	listeningAddress := os.Getenv("LISTEN_ADDRESS")
	listeningPort := os.Getenv("LISTEN_PORT")
	listeningURL := listeningAddress + ":" + listeningPort
	fmt.Printf("Listening on %s\n", listeningURL)

	// Listening
	listener, err := net.Listen(protocol, listeningURL)
	if err != nil {
		log.Panicf("Error listening: %v", err.Error())
	}
	defer listener.Close()

	// Making a loop to accept incoming connections
	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Panicf("Error accepting: %v", err.Error())
		}

		// Handle the connection
		go handleClientConnection(conn)
	}
}

func handleClientConnection(conn net.Conn) {
	defer func() {
		conn.Close()
		fmt.Printf("Closed connection from %s\n", conn.RemoteAddr().String())
	}()

	fmt.Printf("Accepted connection from %s\n", conn.RemoteAddr().String())
	_, err := conn.Write([]byte("Hello from the server! You are " + conn.RemoteAddr().String() + "\n"))
	if err != nil {
		log.Panicf("Error writing: %v", err.Error())
	}
}
